name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:  # environment variables are variables that are available to all jobs and steps in the workflow. they are defined at the top level of the workflow file.
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}  

jobs: # jobs are the main building blocks of a workflow. each job runs in a fresh instance of the virtual environment and can run in parallel or sequentially.
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
            MONGO_URI: 'mongodb://localhost:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        strategy:  # Used to test on different OS and nodejs versions
            matrix:  # matrix strategy is used to run the same job with different parameters. it's important because it allows us to test the code on different environments.
                nodejs_version: [18]  # can add 18 & 19
                operating_system: [ubuntu-latest, macos-latest]  # can add OS
                exclude:
                    - nodejs_version: 18
                      operating_system: macos-latest
        runs-on: ${{ matrix.operating_system }}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version }}
        
        - name: Composite Action - Cache & Install NPM Packages   # Chaching to speed up the workflow
          uses: ./.github/custom-actions/npm-action
          with:
            path-of-folder: node_modules 
        - name: Unit Testing
          run: npm test

        - name: Archive Test Result
          if:  always()                      # excute even the previous step fails
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result
            path: test-results.xml
    code-coverage:
    
        name: Code Coverage
        container: # job container is a lightweight, stand-alone, executable package of software that includes everything needed to run a piece of software, including the code, runtime, libraries, and system tools. it allows us to run the job in a specific environment without having to set up the environment on the host machine.
        # this is useful for running jobs that require a specific version of a language or framework, or for running jobs that require a specific set of dependencies.
          image: node:18
        services:  # services are containers that are started before the job runs and are available to the job during its execution. they are useful for running databases or other services that the job depends on. 
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options: 
                --name mongo
        env:
            MONGO_URI: 'mongodb://mongo:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - 18
          uses: actions/setup-node@v4 # this a
          with:
            node-version: 18

        - name: Composite Action - Cache & Install NPM Packages    # Chaching to speed up the workflow
          uses: ./.github/custom-actions/npm-action
          with:
            path-of-folder: node_modules
        - name: Check Code Coverage
          continue-on-error: true   # skip if there's an error
          run: npm run coverage

        - name: Archive Test Result
          uses: actions/upload-artifact@v4
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5
    docker:

        name: Containerization
        needs: [unit-testing, code-coverage]  # this job will run after the unit-testing and code-coverage jobs are completed successfully
        permissions:
          packages: write  # this job will have write access to the package registries

        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Login to Docker Hub
          uses: docker/login-action@v3.4.0
          with:
            username: ${{ vars.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: GHCR Login
          uses: docker/login-action@v3.4.0
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Docker Build For Testing
          uses: docker/build-push-action@v6
          with:
            context: .  # context is the path to the Dockerfile. it can be a local path or a URL.
            push: false  # set to true if you want to push the image to Docker Hub
            tags: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }} 

        - name: Docker Image Testing
          run: |
            docker images
            docker run --name solar-system-app -d  \
                -p 3000:3000 \
                -e MONGO_URI=$MONGO_URI \
                -e MONGO_USERNAME=$MONGO_USERNAME \
                -e MONGO_PASSWORD=$MONGO_PASSWORD \
                ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
            
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP
            
            echo Testing Image URL using wget 
            wget -q -O - 127.0.0.1:3000/live | grep live

        - name: Docker Push
          uses: docker/build-push-action@v6
          with:
            context: .  # context is the path to the Dockerfile. it can be a local path or a URL.
            push: true  # set to false if you don't want to push the image to Docker Hub
            tags: |    # push image to docker hub and ghcr 
              ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}   
              ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}   

    dev-deploy:
        name: Deploy to Dev Environment
        needs: [docker]  # this job will run after the docker job is completed successfully
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
        
        - name: Install Kubectl CLI from Azure
          uses: azure/setup-kubectl@v4
          with:
             version: 'v1.32.0' # default is latest stable
        
        # KUBECONFIG is required to connect to the Kubernetes cluster. it is a file that contains the configuration information for the kubectl command-line tool. it is used to connect to the Kubernetes cluster and perform operations on it.
        # kubeconfig is file is required by kubectl in order to connect with the cluster and communicate with it.  
        - name: Set Kubeconfig FILE   
          uses: azure/k8s-set-context@v4
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
        
        - name: Configure AWS credentials for EKS 
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ vars.AWS_REGION }}
        - name: Fetch Kubernetes Cluster details   # test if KUBECONFIG is set correctly configured
          run: |   # TEST: kubectl config use-context minikube  | minikube start
            kubectl version
            echo ----------------------
            kubectl get nodes -o wide

        - name: Replace Token in Manifest File
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '{'
            tokenSuffix: '}'
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}

        - name: Save Nginx Ingress Controller IP as a GITHUB Environment Variable
          run: |
            echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV
        
        - name: Replace Token in Manifest files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
            INGRESS_IP:  ${{ env.INGRESS_IP }}

        - name: Check files
          run: |
            cat kubernetes/development/*.yaml




    